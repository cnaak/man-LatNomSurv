#!/bin/bash

THEBIB=./bibfile.bib
BKPBIB=./bibfile.bkp

function help() {
    cat << ____EOF
NAME
    bib - perform atomic bib operations

SYNOPSIS
    bib COMMAND [args]
        where COMMAND is one of:
            help (no args)
                Print this and exits.
            BASE (no args)
                Lists the accessible bibliography database, one file per line.
            LIST (no args)
                Lists keys on the default bibfile ./bibfile.bib initializing  it
                if needed.
            LST (no args)
                Generates a machine-readable list of keys from  default  bibfile
                ./bibfile.bib initializing it if needed.
            ADD <bibpats>
                Adds all bibliographic entries from files matching each  one  of
                the <bibpats>  (no  wildcards),  if  existing,  to  the  default
                ./bibfile.bib, AFTER either (i) backing it up, if  existing,  or
                (ii) restoring  it  from  its  backup,  if  existing,  or  (iii)
                initializing both files if non-existent.
            BACKUP
                Either (i) backup the default  ./bibfile.bib,  if  existing,  or
                (ii)  restore  it  from  its  backup,  if  existing,  or   (iii)
                initialize both files if non-existent.
            REM <bibpats>
                Rebuilds the default ./bibfile.bib from  scratch  from  previous
                list of keys, avoiding each one of the  <bibpats>  patterns  (no
                wildcards), AFTER either (i) backing it up, if existing, or (ii)
                restoring it from its backup, if existing, or (iii) initializing
                both files if non-existent.
            RESET
                Backs up  ./bibfile.bib  into  ./bibfile.bkp,  then  resets  the
                ./bibfile.bib into an empty file.
            SORT

AUTHOR
    Naaktgeboren, C.
____EOF
    exit ${1:--1}
}

# Argument check
if test "a${1}" == "a"; then
    echo -e "ERROR: not enough arguments.\n"
    help -1
fi

# Functionality

function uline() {
    MSG="$(echo -e ${1})"
    echo "${MSG}"
    echo "${MSG}" | sed 's|.|-|g'
}

function hasBib() { test -f "${THEBIB}"; }
function hasBkp() { test -f "${BKPBIB}"; }
function hasBoth() { hasBib && hasBkp; }

function preQuery() {
    if hasBib; then
        echo -e "INFO: Existing '${THEBIB}'" 1>&2
    elif hasBkp; then
        echo -e "INFO: Restored missing '${THEBIB}' from '${BKPBIB}'" 1>&2
        cp -f "${BKPBIB}" "${THEBIB}" 1>&2
    else
        echo -e "INFO: Created empty '${THEBIB}'" 1>&2
        cp -f /dev/null "${THEBIB}" 1>&2
    fi
}

function preChange() {
    if hasBib; then
        echo -e "INFO: Backing up existing '${THEBIB}' into '${BKPBIB}'" 1>&2
        cp -f "${THEBIB}" "${BKPBIB}" 1>&2
    elif hasBkp; then
        echo -e "INFO: Restored missing '${THEBIB}' from '${BKPBIB}'" 1>&2
        cp -f "${BKPBIB}" "${THEBIB}" 1>&2
    else
        echo -e "INFO: Missing '${THEBIB}' and '${BKPBIB}'. Created empty ones." 1>&2
        cp -f /dev/null "${THEBIB}" 1>&2
        cp -f /dev/null "${BKPBIB}" 1>&2
    fi
}

function _listBib() {
    uline "Key list for file '${THEBIB}':"
    grep '^@' "${THEBIB}" |\
        grep -v '^@Comment' |\
        sort -n |\
        sed 's|^|\t|g'
}

function _lstBib() {
    grep '^@' "${THEBIB}" |\
        grep -v '^@Comment' |\
        sed 's|^.*{||g' |\
        sed 's|, *$||g' |\
        sort -n
}

function listBib() {
    if [ "$#" -lt 1 ]; then
        _listBib
    else
        p="$1"
        shift
        listBib | grep "$p"
    fi
}

function lstBib() {
    if [ "$#" -lt 1 ]; then
        _lstBib
    else
        p="$1"
        shift
        lstBib "$@" | grep "$p"
    fi
}

function dbase() {
    find -L . -name '*\.bib' | grep -v "${THEBIB}" | sort -n
}

function dbfiles() {
    for i in $(dbase); do basename "${i}"; done
}

function keysOf() {
    FULPTH="$(find -L . -name ${1}.bib)"
    grep '^@' "${FULPTH}" |\
        grep -v '^@Comment' |\
        sed 's|^.*{||g' |\
        sed 's|, *$||g' |\
        sort -n
}

function addBib() {
    if [ "$#" -lt 1 ]; then
        echo -e "ERROR: Missing arguments to ADD.\n" 1>&2
        help -1
    fi
    for BIBPAT in "$@"; do
        for BIBSRC in $(dbfiles | sed "s|\.bib$||g" | grep "${BIBPAT}"); do
            if grep -q "$(keysOf ${BIBSRC})" "${THEBIB}"; then
                for BIBKEY in $(keysOf ${BIBSRC}); do
                    echo -e "INFO: x '${BIBKEY}' (from ${BIBSRC})."
                done
            else
                for BIBKEY in $(keysOf ${BIBSRC}); do
                    echo -e "INFO: + '${BIBKEY}' (from ${BIBSRC})."
                done
                cat $(find -L . -name "${BIBSRC}.bib") >> "${THEBIB}"
                echo "" >> "${THEBIB}"
            fi
        done
    done
}

function remBib() {
    CURKEY="$(./bib LST)"
    REMKEY="$(echo $@ | sed 's| |\n|g')"
    DIFKEY="$(echo "${CURKEY}" | grep -v "${REMKEY}")"
    echo -e "INFO: x ALL KEYS."
    cp /dev/null "${THEBIB}"
    addBib "${DIFKEY}"
}

function sortBib() {
    echo -e "INFO: Sorting '${THEBIB}'"
    remBib "$(md5sum ${THEBIB} | cut -f1 -d' ')"
}

# MAIN - Parse commands
COMM="${1}"
shift
case "${COMM}" in
    #----------------------------------------------------------------------#
    #                              No-DB opts                              #
    #----------------------------------------------------------------------#
    "help" | "HELP")
        help 0;;
    #----------------------------------------------------------------------#
    #                           Remote DBs opts                            #
    #----------------------------------------------------------------------#
    "BASE")
        dbase;;
    #----------------------------------------------------------------------#
    #                              Query opts                              #
    #----------------------------------------------------------------------#
    "LIST")
        preQuery
        listBib "$@";;
    "LST")
        preQuery
        lstBib "$@";;
    #----------------------------------------------------------------------#
    #                            Local DB opts                             #
    #----------------------------------------------------------------------#
    "ADD")
        preChange
        addBib "$@";;
    "BACKUP")
        preChange;;
    "REM")
        preChange
        remBib "$@";;
    "RESET")
        preChange
        cp /dev/null "${THEBIB}";;
    "SORT")
        preChange
        sortBib "$@";;
    #----------------------------------------------------------------------#
    #                               Invalid                                #
    #----------------------------------------------------------------------#
    *)
        echo -e "ERROR: invalid command: '${1}'.\n" 1>&2
        help -1;;
esac

